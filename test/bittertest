#!/bin/sh

# Scott Bronson
# 3 Nov 2004

# This throws an endless stream of randomly-sized files with
# randomly chosen attributes at the zmodem transfer programs.
# It stops if it finds an error.

# -R  : use lrz instead of rzh -r to receive
# -S  : use lsz instead of rzh -s to send
# -e  : just output generated file sizes (to test the random number generator).
# -l  : tells bittertest to use lrzsz to receive instead of rzh.
# -n N: the maximum number of tests to perform (default: unlimited)
# -r N: random seed (default: 1)
# -s N: maximum file size (by default 64 megabytes).
#     	note that we use rand^4, so the avg file size is smaller than 32 MB
# -t P: specifies the temporary directory to use (default: /tmp)

# The output:
# seq:   sequence number -- starts at 1 and counts upward.
# size:  the size of the file being transferred in bytes
# seed:  the randseed used to create the file
# name:  the name of the created file
# mode:  the permissions on the created file
# cr:    the wallclock time needed to create the file
# tx:    the wallclock time needed to transfer the file
# ck:    the wallclock time needed to check the file
# total: the wallclock time needed to do all 3.


# Both errexit and pipefail appear to be pretty buggy.   I check the
# result of each command manually to ensure we always catch failures.

# todo: should randomize the filename too.
# todo: what about batching?


# full path to randfile program
#RANDFILE=./randfile.pl
RANDFILE=./randfile

RZ=`pwd`"/../rzh -r"
# This is disabled until rzh -s can work bug-free.
# SZ=`pwd`"/../rzh -s"
SZ=/usr/bin/sz
TMPDIR="/tmp"

RANDOM=1
MAXSIZE=64*1048576

while getopts ":eRSn:r:s:t:" opt
do
	case $opt in
		e) CHECKSIZE=1;;
		R) RZ=/usr/bin/rz;;
		S) SZ=/usr/bin/sz;;
		n) MAXITER=$OPTARG;;
		r) RANDOM=$OPTARG;;
		s) MAXSIZE=$OPTARG;;
		t) TMPDIR=$OPTARG;;
		*) echo "invalid option: ${OPTARG}"; exit 1;;
	esac
done
shift $(($OPTIND - 1))
if (($#)); then
	echo "Too many arguments!"
	exit 0
fi
# for arg do echo '--> '"\`$arg'" ; done

if [ ! -d "$TMPDIR" ]; then echo "Directory \"$TMPDIR\" doesn't exist."; exit 1; fi
if [ ! -w "$TMPDIR" ]; then echo "Directory \"$TMPDIR\" isn't writable."; exit 1; fi

srcfile="$TMPDIR/bittertest.data"
dstdir="$TMPDIR/bittertest"
dstfile="$dstdir/bittertest.data"
pipe="$TMPDIR/bittertest.pipe"

rm -rf "$dstdir" "$pipe"
mkdir "$dstdir"
if (($?)) ; then echo "Could not mkdir \"$dstdir\"."; exit 1; fi
mkfifo "$pipe"
if (($?)) ; then echo "Could not mkfifo \"$pipe\"."; exit 1; fi


forma="%6d %10d %8d %10s %6s "
formb="%7.3f %7.3f %7.3f %8.4f"
forms="%6s %10s %8s %10s %6s %7s %7s %7s %8s"

count=0
while :
do
	seed=$(($RANDOM))
	name=transfer

	# hackish way of generating a random number heavily weighted
	# towards the bottom, but still occasionally generates really large
	# numbers, prime numbers, etc.
	size=$(((($RANDOM << 16) | $RANDOM) % $MAXSIZE))
	size=$(((($RANDOM << 16) | $RANDOM) % ($size+1)))
	size=$(((($RANDOM << 16) | $RANDOM) % ($size+1)))
	size=$(((($RANDOM << 16) | $RANDOM) % ($size+1)))
	size=$(((($RANDOM << 16) | $RANDOM) % ($size+1)))

	# Ensure that the file always has u+r permission.
	mode=$((($RANDOM % 4096) | 0400))
	mode=`printf "%04o" $mode`

	if (($CHECKSIZE)) ; then
		echo $size
	else
		rm -f "$srcfile" "$dstfile"

		if (($count % 64 == 0)) ; then
			printf "\n$forms\n" "seq" "size B" seed name mode "cr s" "tx s" "ck s" "total s"
			printf "%s\n" -----------------------------------------------------------------------------
		fi

		# create file contents
		printf "$forma" $count $size $seed "$name" $mode
		nows=`date +%s.%N`
		$RANDFILE --size=$size --seed=$seed > "$srcfile"
		if (($?)) ; then echo "Error in randfile."; exit 1; fi
		chmod $mode "$srcfile"
		if (($?)) ; then echo "Error in chmod."; exit 1; fi

		# transmit the file
		nowx=`date +%s.%N`
		$SZ -q "$srcfile" < "$pipe" | (cd "$dstdir" && exec $RZ -q > "$pipe")
		printf "$forma" $count $size $seed "$name" $mode
		if (($?)) ; then echo "Error in transmission."; exit 1; fi

		# unfortunately, stat appears to return a 0 exit code no matter what.
		sti=`stat -c "%a %Y" "$srcfile"`
		if (($?)) ; then echo "Error calling stat on input file."; exit 1; fi
		sto=`stat -c "%a %Y" "$dstfile"`
		if (($?)) ; then echo "Error calling stat on output file."; exit 1; fi
		if [ "$sti" != "$sto" ]; then echo "Stats don't match.  src='$sti' dst='$sto'"; exit 1; fi

		nowc=`date +%s.%N`
		cmp "$srcfile" "$dstfile"
		if (($?)) ; then echo "Error in comparison.  Files don't match?"; exit 1; fi

		nowe=`date +%s.%N`
	fi

	tms=$(echo $nowx-$nows | bc -l)
	tmx=$(echo $nowc-$nowx | bc -l)
	tmc=$(echo $nowe-$nowc | bc -l)
	tmt=$(echo $nowe-$nows | bc -l)
	printf "$formb\n" $tms $tmx $tmc $tmt

	count=$((count+1))
	if [ -n "$MAXITER" ] && [ "$count" -ge "$MAXITER" ] ; then
		exit 0;
	fi
done


#for((a=1; a <= "$NUM"; a++))
#do
#	echo $(($RANDOM))
#done

