The problem is the bidirectional pipe.

	in -> master, master -> out

We're watching maout for the start transfer sequence.  When we see
it (not necessarily at the beginning of the fifo), we need to drain
maout of all the data up to the zmodem start.  Then we need to
ensure that inma is drained of all data as well so we don't corrupt
the transfer with stale data.


So, to scan maout:
	- you notice at byte 302 the beginning zmodem start string
	- you drain the remaining 302 bytes from maout
	- what should you do for inma at this point?
		- You could wait until it goes quiescent
		  	- it might never go quiescent
		- You could switch it over immediately
			- this seems to be the only plausible choice.  In this case it's ok.
	- SO, maout is empty.  Inma may not be.
		- Switch maout to machi.
		- Switch inma to chima.
		But now in and out are unused.
		- Out will still accept whatever data we have to offer. no prob here.
		- In may still be submitting data.  Oh well, nothing we can do.

Then, to switch back:
	- We get a sigchild.
	- We switch back.
		- What about draining the buffers???  Reading one fd will give
		  a sigchld, but there may still be data on the other one?
	- Hm.


Using multiple fifos may be an advantage over marking a spot in one
fifo and waiting for it to drain.  Marking the spot is somewhat painful.
	Right now fifos are associated with the master pipe.
	Making them a part of the task

Hell, I can live with the way it is now.  Since it's usually being
started by hand, the chance of deadlock is slim to none.



4: master, sender
8: child, receiver

1) Sender sends ZFIN
	Child receives the ZFIN
2) Child sends ZFIN in response
	Sender receives it
		Sender might send "OO" (over and out) or not.  Stupid protocol.
	We shut the child down immediately after it sends the zfin
		This prevents further packets from hitting the sender
		and being interpreted as shell commands.

So, when we recognize a ZFIN from the child:
	We turn off that fifo.  No more data will be read from the child.
	We kill the child.  We know the sender has already sent a ZFIN.

When we recognize a ZFIN from the master:
	We supporess a further optional "OO"
	We ensure that all further data gets written to stdout.
		So, what we do, we store all data read from the master AFTER the ZFIN/OO
		Then, when the pipes are restored, the data is written back into the pipe.




Assembly
--------

MASTER
Our side of the tty connection.

SLAVE
The remote side of the tty.  The shell that we spawn to handle all
further user interaction runs on the slave.

FIFO
The basic unit is the FIFO.  It just buffers data between reads and writes.
You read as much data as you can into the fifo, process it, then write it
back out.  Or, you write data into the fifo, then read it back out.
Depends on your perspective.  Fifos include a thing called a read proc.
If set, then rather than using memcpy to copy data into a fifo, the read
proc is given the opportunity to search or modify the data.  Read procs
are used to manipulate the data flowing through the fifo.  All manipulation
and searching happens on the read, not on the write.

	Come to think of it, because 99% of reads and writes go to exhaustion,
	There just isn't much need for a fifo.  Instead, we should have a balloon,
	which starts to inflate when the writer can't manage to keep up.
	It would be simpler and probably slightly faster than a fifo.

PIPE
A pipe is simply a single FIFO with endpoints (data sources or sinks).
The endpoints are called "atoms" (from io_atoms, the async io lib).
It moves data in one diraction, from an input, through some processing
steps, to an output.  Pipes should handle flow control so if a write
stops listening, we can stall the pipe until room opens up again (this
works in theory but it sure hasn't been rigorously tested).

PIPE_ATOM
A pipe_atom connects one end of a pipe to an io_atom data source
or sink.  Pipes contain two atoms, a read atom and a write atom.
These atoms can be retargeted at almost any time.  Therefore, you
can resplice pipes in an operating pipeline.

MASTER_PIPE
This controls sending and receiving data from the master.  A master_pipe
consists of two pipes, the input pipe and the output pipe.  It also has
some hooks to handle events, mostly relating to shutting the pipe down.

TASK_SPEC
A task is a processing step you can lay on top of a pipe.  For instance,
normally the echo task is copying data from stdin/stdout to the master and
back.  However, when we notice a zmodem transfer, we launch a rz process
and insert it as another task on the master pipe.  Thus the rz task
overrides the echo task.  As soon as the rz is done, the pipe reverts
back to echoing.  The task_spec specifies all the hooks and i/o points
for the task.

TASK_STATE
When a task is started up, its transient state is stored in task_state.
You shouldn't have to worry about task_states.  Just create a task_spec
and insert it -- the task_state will be created and destroyed as needed.

