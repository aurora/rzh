diff -ruN orig-3/zmcore.c new/zmcore.c
--- orig-3/zmcore.c	2004-11-13 12:05:56.000000000 -0800
+++ new/zmcore.c	2004-11-13 12:03:42.000000000 -0800
@@ -232,7 +232,11 @@
 #endif
     zmcore->goodOffset = 0;
     zmcore->skip = 0;
-    extFileSetInfo(zmcore, zmcore->zmext);
+    extFileReceiveStart(zmcore, zmcore->zmext);
+	if(!ALLOK) {
+		return;
+	}
+
     if (zmcore->skip)
     {
         sendZSKIP(zmcore);
@@ -270,7 +274,7 @@
                     if (posMatch(zmcore))
                     {
                         extModemRegisterGood(zmcore, zmcore->zmext);
-                        extFileFinish(zmcore, zmcore->zmext);
+                        extFileReceiveFinish(zmcore, zmcore->zmext);
                         quit = 1;
                     }
                     else
@@ -321,7 +325,7 @@
             getData(zmcore);
             if (ALLOK)
             {
-                extFileWriteData(zmcore, 
+                extFileReceiveData(zmcore, 
                                  zmcore->zmext,
                                  zmcore->mainBuf, 
                                  (size_t)(zmcore->bufPos - zmcore->mainBuf));
@@ -356,7 +360,7 @@
                     if (posMatch(zmcore))
                     {
                         extModemRegisterGood(zmcore, zmcore->zmext);
-                        extFileFinish(zmcore, zmcore->zmext);
+                        extFileReceiveFinish(zmcore, zmcore->zmext);
                         quit = 1;
                     }
                 }
@@ -1424,18 +1428,17 @@
 
 static void sendFiles(ZMCORE *zmcore)
 {
-    int gotfile;
     int tries;
     int sent;
     unsigned long offset;
     
     zmcore->filename[0] = '\0';
     zmcore->filesize = 0;
-    zmcore->filetime = time(NULL);
+    zmcore->filetime = 0;
     zmcore->filemode = 0644;
 
-    gotfile = extFileGetFile(zmcore, zmcore->zmext);
-    while (ALLOK && gotfile)
+    extFileSendStart(zmcore, zmcore->zmext);
+    while (ALLOK && zmcore->filename[0] != '\0')
     {
         zmcore->goodOffset = 0;
         tries = 0;
@@ -1480,14 +1483,15 @@
                 tries++;
             }
         }
+        extFileSendFinish(zmcore, zmcore->zmext);
         if (ALLOK)
         {
             zmcore->filename[0] = '\0';
             zmcore->filesize = 0;
-            zmcore->filetime = time(NULL);
+            zmcore->filetime = 0;
             zmcore->filemode = 0644;
 
-            gotfile = extFileGetFile(zmcore, zmcore->zmext);
+            extFileSendStart(zmcore, zmcore->zmext);
         }
     }
     return;
@@ -1519,12 +1523,15 @@
 #ifdef DEBUG
             printf("in SM_SENDZDATA\n");
 #endif
-            if (!extFileGetData(zmcore, 
+            extFileSendData(zmcore, 
                                 zmcore->zmext,
                                 zmcore->mainBuf, 
                                 zmcore->maxTx, 
-                                &zmcore->bytes))
-            {
+                                &zmcore->bytes);
+            if(!ALLOK) {
+                break;
+            }
+            if(!zmcore->bytes) {
                 state = SM_SENDZEOF;
             }
             else
@@ -1569,7 +1576,7 @@
                         }
                         else 
                         {
-                            extFileGetData(zmcore,
+                            extFileSendData(zmcore,
                                            zmcore->zmext,
                                            zmcore->mainBuf, 
                                            zmcore->maxTx,
diff -ruN orig-3/zmcore.h new/zmcore.h
--- orig-3/zmcore.h	2004-11-13 09:13:42.000000000 -0800
+++ new/zmcore.h	2004-11-13 12:03:26.000000000 -0800
@@ -14,7 +14,6 @@
 #define ZMCORE_INCLUDED
 
 #include <stdio.h>
-#include <time.h>
 
 #include "zmext.h"
 
@@ -41,7 +40,7 @@
     size_t maxTx;
     long goodOffset;
     long filesize;
-    time_t filetime;
+    long filetime;
     int filemode;
     int gotSpecial;
     int gotHeader;
diff -ruN orig-3/zmfr-unix.c new/zmfr-unix.c
--- orig-3/zmfr-unix.c	1969-12-31 16:00:00.000000000 -0800
+++ new/zmfr-unix.c	2004-11-13 12:54:17.000000000 -0800
@@ -0,0 +1,190 @@
+/*********************************************************************/
+/*                                                                   */
+/*  This Program Written by Paul Edwards, 3:711/934@fidonet.         */
+/*  Released to the Public Domain                                    */
+/*                                                                   */
+/*********************************************************************/
+/*********************************************************************/
+/*                                                                   */
+/*  zmfr - functions to operate on files.                            */
+/*                                                                   */
+/*********************************************************************/
+
+// This file demonstrates how to write zmfr.c for a POSIX system.
+// Receive works.  Since my program doesn't need send, I haven't
+// verified that send works.
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <time.h>
+
+#include <error.h>
+#include <trav.h>
+#include <unused.h>
+
+#include "zmfr.h"
+#include "pdcomm.h"
+
+
+
+/** This can be called on files opened by either extFileReceiveStart
+ * or extFileSendStart.
+ */
+void extFileSetPos(ZMCORE *zmcore, ZMEXT *zmext, long offset)
+{
+    off_t curpos;
+
+    unused(zmcore);
+    curpos = lseek(zmext->fd, offset, SEEK_SET);
+    if(curpos != offset) {
+        errorSet("Couldn't seek to %lu on %s: %s\n",
+                offset, zmcore->filename, strerror(errno));
+    }
+    return;
+}
+
+
+/** Opens a file to receive the incoming data.
+ *
+ *  The following zmcore parameters are available as input:
+ *  - filename: the name of the file
+ *  - fileinfo: the zmodem info string for the file
+ *  - filemode: the mode as read from fileinfo
+ *  - filesize: the supposed file size as read from fileinfo
+ *  - filetime: the file modification time as read from fileinfo
+ *
+ *  and you may set the following zmcore parameters to affect the transfer:
+ *  - goodOffset: ?? (defaults to 0)
+ *  - skip: ?? (defaults to 0)
+ */
+void extFileReceiveStart(ZMCORE *zmcore, ZMEXT *zmext)
+{
+    zmext->fd = open(zmcore->filename, O_CREAT|O_WRONLY|O_TRUNC);
+    if (zmext->fd < 0)
+    {
+        errorSet("failed to open file %s: %s\n", zmcore->filename, strerror(errno));
+    }
+}
+
+/** Called one or more times to write data to the file.
+ * The file was opened using extFileReceiveStart.
+ * Bytes will never be 0.
+ */
+void extFileReceiveData(ZMCORE *zmcore, ZMEXT *zmext, void *buf, size_t bytes)
+{
+    long cnt;
+
+    unused(zmcore);
+    cnt = write(zmext->fd, buf, bytes);
+    if(cnt != bytes) {
+        errorSet("fwrite failed on %s, wrote only %ld bytes: %s\n",
+                zmcore->filename, cnt, strerror(errno));
+    }
+}
+
+/** Closes the file opened by extFileReceiveStart.
+ */
+void extFileReceiveFinish(ZMCORE *zmcore, ZMEXT *zmext)
+{
+    struct utimbuf tv;
+    int err;
+
+    err = close(zmext->fd);
+    if(err != 0) {
+        errorSet("Error closing receive file %s: %s", zmcore->filename, strerror(errno));
+        return;
+    }
+
+    // Set file mtime.
+    if(zmcore->filetime) {
+        tv.actime = tv.modtime = zmcore->filetime;
+        err = utime(zmcore->filename, &tv);
+        if(err) {
+            fprintf(stderr, "Error setting mtime for %s: %s\n",
+                    zmcore->filename, strerror(errno));
+        }
+    }
+
+    // Set file mode.  Ensure that we don't set exec or special permissions
+    // if user is running as root.
+    err = chmod(zmcore->filename, zmcore->filemode &
+            (geteuid() ? 07777 : 00666));
+    if(err) {
+        fprintf(stderr, "Error setting permissions for %s to 0%o: %s\n",
+                zmcore->filename, (int)zmcore->filemode, strerror(errno));
+    }
+}
+
+/** Opens a file containing the data to send and reads it attributes.
+ *
+ *  You must set the following parameters in zmcore:
+ *  - filename: the name of the file
+ *
+ *  you should set the following parameters:
+ *  - filesize: the advertised file size (defaults to 0).
+ *
+ *  you may set the following parameters:
+ *  - filemode: the mode (defaults to 0644).
+ *  - filetime: the file modification time (defaults to the current time).
+ */
+void extFileSendStart(ZMCORE *zmcore, ZMEXT *zmext)
+{
+    struct stat st;
+
+    // find next file to open
+    strncpy(zmcore->filename, *zmext->argv, sizeof(zmcore->filename));
+    zmcore->filename[sizeof(zmcore->filename)-1] = '\0';
+    if(*zmext->argv) {
+        zmext->argv++;
+    }
+
+    // open it
+    zmext->fd = open(zmcore->filename, O_RDONLY);
+    if (zmext->fd == -1) {
+        errorSet("failed to open file %s: %s\n", zmcore->filename, strerror(errno));
+    } else {
+        // and read its attrs
+        err = fstat(zmext->fd, &st);
+        if(err) {
+            errorSet("failed to stat file %s: %s\n", zmcore->filename, strerror(errno));
+        } else {
+            zmcore->filetime = st.st_mtime;
+            zmcore->filesize = st.st_size;
+            zmcore->filemode = st.st_mode;
+        }
+    }
+}
+
+
+/** Obtains data from the file we're sending.
+ * Return the number of bytes read in "bytes" or 0 at EOF.
+ */
+void extFileSendData(ZMCORE *zmcore,
+        ZMEXT *zmext,
+        void *buf, 
+        size_t max, 
+        size_t *bytes)
+{
+    *bytes = read(zmext->fd, buf, max);
+    if(ferror(zmext->fq)) {
+        errorSet("Read error on %s: %s\n", zmcore->filename, strerror(errno));
+    }
+}
+
+/** Closes the file opened by extFileSendStart.
+*/
+void extFileSendFinish(ZMCORE *zmcore, ZMEXT *zmext)
+{
+    int err;
+
+    err = close(zmext->fd);
+    if(err != 0) {
+        errorSet("Error closing send file %s: %s", zmcore->filename, strerror(errno));
+        return;
+    }
+}
+
diff -ruN orig-3/zmfr.c new/zmfr.c
--- orig-3/zmfr.c	2004-11-13 09:13:42.000000000 -0800
+++ new/zmfr.c	2004-11-13 12:53:17.000000000 -0800
@@ -6,12 +6,13 @@
 /*********************************************************************/
 /*********************************************************************/
 /*                                                                   */
-/*  zmfr - friend functions that operate on zmcore + zmext           */
+/*  zmfr - functions to operate on files.                            */
 /*                                                                   */
 /*********************************************************************/
 
 #include <stdlib.h>
 #include <stdio.h>
+#include <errno.h>
 
 #include <error.h>
 #include <trav.h>
@@ -20,6 +21,25 @@
 #include "zmfr.h"
 #include "pdcomm.h"
 
+
+
+/** This can be called on files opened by either extFileReceiveStart
+ * or extFileSendStart.
+ */
+void extFileSetPos(ZMCORE *zmcore, ZMEXT *zmext, long offset)
+{
+    long curpos;
+
+    unused(zmcore);
+    printf("seeking to offset %lu\n", offset);
+    curpos = fseek(zmext->fq, offset, SEEK_SET);
+    if(curpos != offset) {
+        errorSet("Couldn't seek to %lu: %s\n", offset, strerror(errno));
+    }
+    return;
+}
+
+
 /** Opens a file to receive the incoming data.
  *
  *  The following zmcore parameters are available as input:
@@ -33,31 +53,44 @@
  *  - goodOffset: ?? (defaults to 0)
  *  - skip: ?? (defaults to 0)
  */
-void extFileSetInfo(ZMCORE *zmcore, ZMEXT *zmext)
+void extFileReceiveStart(ZMCORE *zmcore, ZMEXT *zmext)
 {
     unused(zmcore);
     printf("opening file %s\n", zmcore->filename);
     zmext->fq = fopen(zmcore->filename, "wb");
     if (zmext->fq == NULL)
     {
-        printf("failed to open file %s\n", zmcore->filename);
+        errorSet("failed to open file %s: %s\n", zmcore->filename, strerror(errno));
     }
-    return;
 }
 
-void extFileWriteData(ZMCORE *zmcore, ZMEXT *zmext, void *buf, size_t bytes)
+/** Called one or more times to write data to the file.
+ * The file was opened using extFileReceiveStart.
+ * Bytes will never be 0.
+ */
+void extFileReceiveData(ZMCORE *zmcore, ZMEXT *zmext, void *buf, size_t bytes)
 {
+    long cnt;
+
     unused(zmcore);
-    fwrite(buf, bytes, 1, zmext->fq);
-    return;
+    cnt = fwrite(buf, 1, bytes, zmext->fq);
+    if(cnt != bytes) {
+        errorSet("fwrite failed, wrote only %ld bytes: %s\n", cnt, strerror(errno));
+    }
 }
 
-void extFileFinish(ZMCORE *zmcore, ZMEXT *zmext)
+/** Closes the file opened by extFileReceiveStart.
+ */
+void extFileReceiveFinish(ZMCORE *zmcore, ZMEXT *zmext)
 {
+    int err;
+
     unused(zmcore);
-    printf("closing file\n");
-    fclose(zmext->fq);
-    return;
+    printf("closing write file\n");
+    err = fclose(zmext->fq);
+    if(err != 0) {
+        errorSet("Error closing file: %s", strerror(errno));
+    }
 }
 
 /** Opens a file containing the data to send and reads it attributes.
@@ -71,39 +104,29 @@
  *  you may set the following parameters:
  *  - filemode: the mode (defaults to 0644).
  *  - filetime: the file modification time (defaults to the current time).
- *
- *  Returns: 1, or 0 if there was an error opening the file.
  */
-int extFileGetFile(ZMCORE *zmcore, ZMEXT *zmext)
+void extFileSendStart(ZMCORE *zmcore, ZMEXT *zmext)
 {
-    int ret = 0;
-
     strcpy(zmcore->filename, zmext->fileList[zmext->fileUpto++]);
     printf("opening file %s\n", zmcore->filename);
     zmext->fq = fopen(zmcore->filename, "rb");
     if (zmext->fq == NULL)
     {
-        printf("failed to open file %s\n", zmcore->filename);
+        errorSet("failed to open file %s: %s\n", zmcore->filename, strerror(errno));
     }
     else
     {
         fseek(zmext->fq, 0, SEEK_END);
         zmcore->filesize = ftell(zmext->fq);
         rewind(zmext->fq);
-        ret = 1;
     }
-    return (ret);
 }
 
-void extFileSetPos(ZMCORE *zmcore, ZMEXT *zmext, long offset)
-{
-    unused(zmcore);
-    fseek(zmext->fq, offset, SEEK_SET);
-    printf("seeking to offset %lu\n", offset);
-    return;
-}
 
-int extFileGetData(ZMCORE *zmcore,
+/** Obtains data from the file we're sending.
+ * Return the number of bytes read in "bytes" or 0 at EOF.
+ */
+void extFileSendData(ZMCORE *zmcore,
                    ZMEXT *zmext,
                    void *buf, 
                    size_t max, 
@@ -111,6 +134,23 @@
 {
     unused(zmcore);
     *bytes = fread(buf, 1, max, zmext->fq);
+    if(ferror(zmext->fq)) {
+        errorSet("Read error: %s\n", strerror(errno));
+    }
     printf("read %d bytes\n", *bytes);
-    return (*bytes != 0);
 }
+
+/** Closes the file opened by extFileSendStart.
+ */
+void extFileSendFinish(ZMCORE *zmcore, ZMEXT *zmext)
+{
+    int err;
+
+    unused(zmcore);
+    printf("closing read file\n");
+    err = fclose(zmext->fq);
+    if(err != 0) {
+        errorSet("Error closing file: %s", strerror(errno));
+    }
+}
+
diff -ruN orig-3/zmfr.h new/zmfr.h
--- orig-3/zmfr.h	2004-11-13 09:13:42.000000000 -0800
+++ new/zmfr.h	2004-11-13 12:02:48.000000000 -0800
@@ -15,13 +15,15 @@
 #include "zmcore.h"
 #include "zmext.h"
 
-void extFileSetInfo(ZMCORE *zmcore, ZMEXT *zmext);
-void extFileWriteData(ZMCORE *zmcore, ZMEXT *zmext, void *buf, size_t bytes);
-void extFileFinish(ZMCORE *zmcore, ZMEXT *zmext);
-int extFileGetFile(ZMCORE *zmcore, ZMEXT *zmext);
 void extFileSetPos(ZMCORE *zmcore, ZMEXT *zmext, long offset);
-int extFileGetData(ZMCORE *zmcore, 
+
+void extFileReceiveStart(ZMCORE *zmcore, ZMEXT *zmext);
+void extFileReceiveData(ZMCORE *zmcore, ZMEXT *zmext, void *buf, size_t bytes);
+void extFileReceiveFinish(ZMCORE *zmcore, ZMEXT *zmext);
+void extFileSendStart(ZMCORE *zmcore, ZMEXT *zmext);
+void extFileSendData(ZMCORE *zmcore, 
                    ZMEXT *zmext,
                    void *buf, 
                    size_t max, 
                    size_t *bytes);
+void extFileSendFinish(ZMCORE *zmcore, ZMEXT *zmext);
